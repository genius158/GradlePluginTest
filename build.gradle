import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.api.BaseVariant
import com.android.build.gradle.api.BaseVariantOutput
import com.android.build.gradle.internal.api.ApplicationVariantImpl
import com.android.build.gradle.internal.api.BaseVariantImpl
import com.android.build.gradle.internal.tasks.CheckManifest
import com.android.build.gradle.internal.variant.ApkVariantData

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.4.0'

    repositories {
        google()
        jcenter()
        mavenCentral()

        println("rootProject   ${rootProject.projectDir}")
        maven {
            url uri('asmlocal/plugins')
        }
        maven {
            url uri('testPlugin/plugins')
        }
        maven {
            url uri('asmprivacy/plugins')
        }
    }
    dependencies {
        classpath 'com.yan.testpluin:testPlugin:0.0.1'
        classpath 'com.android.tools.build:gradle:4.0.1'

        classpath 'com.novoda:bintray-release:0.9.1'
        classpath 'com.yan.asmlocal:asmlocal:0.0.1'
        classpath 'com.yan.testpluin:asmprivacy:0.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
afterEvaluate {
//    def d=project.buildscript.configurations.getByName("classpath").dependencies.getAt(0)
//    project.buildscript.configurations.getByName("classpath").dependencies.remove(d)

    //dependencyConstraintHandler
    project.dependencies.any { t ->
//        println("project.dependencies   ${     project.dependencies.add("classpath",'com.yan.testpluin:testPlugin:0.0.1')}")
    }
    println("project.dependencies   ${project.dependencies.getMetaPropertyValues()}")

}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task printPerson() {
    //定义时
    println "this is printPerson printPerson printPerson"

    doLast {
        println "this is printPerson"
    }
}


//printPerson.dependsOn("app:assemble")
//后来加
printPerson.doFirst {
    println "this is doFirst1"
}
printPerson.doFirst {
    println "this is doFirst2"
}
printPerson.doLast {
    println "this is doLast2"
}

task test1() {
    doFirst {
        println "test1 test1 test1 test1 test1"
    }
}

task test2() {
    doFirst {
        println "test2 test2 test2 test2 test2"
    }
}
test2.shouldRunAfter(test1)

//project.task("app:assemble").dependsOn(printPerson)
//Graph

def lastTask

project.gradle.taskGraph.whenReady { graph ->
    tasks.withType(DefaultTask) {
        println "withType  DefaultTask   ------------------------ $it"

    }


    graph.allTasks.each { Task task ->
        println "afterEvaluate $task    ${task.name}"


        task.getOutputs().any { output ->
            output.files.any { f ->
                def path = f.absolutePath
                println "${task.name} ${task.getClass().getName()}  path path path path path     $path"

            }
        }

        if (task.name == "assembleDebug") {
            println "afterEvaluate ------------------------ $task"

            lastTask.doFirst {
                println "lastName ---------lastName------lastName----lastName----- $task"
            }

            task.doFirst {
                println "doFirst ---------doFirst------doFirst----doFirst----- $task"
            }
        }
        lastTask = task
    }
}

getSubprojects().each { p ->
    if (p.name.contains("app"))
        p.apply plugin: 'com.android.application'


    p.afterEvaluate {
//        p.getTasks().withType(org.gradle.api.tasks.compile.JavaCompile).all{t->
//            println("JavaCompile JavaCompile JavaCompile JavaCompile-----   ${((Task)t).getInputs().getFiles().getFiles()}")
//        }

        try {

            p.android.applicationVariants.all { variant ->
                ((ApplicationVariant) variant).getOutputs().all { BaseVariantOutput baseVariantOutput ->
                    def dir = baseVariantOutput.getProcessManifestProvider().get().getOutputs().getFiles().getFiles()
                    println("getJavaCompileProvider--   ${dir}")

                    def source = baseVariantOutput.getProcessResourcesProvider().get().manifestFiles.get()
                    println("getJavaCompileProvider-- source   ${source}")

                }

                def minifests = ((ApkVariantData) ((ApplicationVariantImpl) variant).variantData)

                println("getJavaCompileProvider--   ${minifests}")
                println("getJavaCompileProvider--   ${((BaseVariantImpl) variant).checkManifest.getOutputs().getFiles().getFiles()}")

                ((BaseVariantImpl) variant).getJavaCompile()
                ((BaseVariantImpl) variant).getJavaCompiler().doFirst { t ->
                    ((org.gradle.api.tasks.compile.JavaCompile) t).getOutputs().getFiles().any { f ->
                        println("JavaCompile-----   ${f.absolutePath}")

                    }
                    println("KotlinCompile KotlinCompile 111111111111111111   ${t.getClass().getSuperclass()}")

                }
            }
        } catch (Throwable e) {
            e.printStackTrace()
        }

//        p.getTasks().getByName("compileDebugKotlin").getOutputs().getFiles()
//        println("KotlinCompile KotlinCompile output File  ${p.getTasks().getByName("compileDebugKotlin").getOutputs().getFiles().getFiles()} ")

    }


    p.getTasks().withType(com.android.build.gradle.tasks.ManifestProcessorTask).whenTaskAdded { Task task ->
        task.doFirst {
            task.getInputs().any { output ->
                output.files.any { f ->
                    def path = f.absolutePath
                    println "${task.name}   ProcessApplicationManifest     $path"
                }
            }
        }
    }

    p.getTasks().withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).whenTaskAdded { Task task ->
        task.doFirst {
            task.getOutputs().any { output ->
                output.files.any { f ->
                    def path = f.absolutePath
                    println "${task.name}   r324242114141     $path"
                }
            }
        }
    }
    p.getTasks().withType(JavaCompile).whenTaskAdded { Task task ->
        task.doFirst {
            task.getOutputs().any { output ->
                output.files.any { f ->
                    def path = f.absolutePath
                    println "${task.name}   r324242114141     $path"
                }
            }
        }
    }

    println("afterEvaluate afterEvaluate afterEvaluate")
    p.afterEvaluate {

    }
    p.getTasks().whenTaskAdded { Task t ->
        if (t.name.contains("dexBuilder")) {
            p.afterEvaluate {
                t.getInputs().any { input ->
                    println("ttsttsttsttsttsttsttsttstts1111   ${input.files.files}")
                }
                t.getOutputs().any { input ->
                    println("ttsttsttsttsttsttsttsttstts2222   ${input.files.files}")
                }
            }

        }
    }


//    p.getTasks().withType(DexMergingTask).whenTaskAdded { Task task->
//        task.doFirst {
//            task.getOutputs().any {output->
//                output.files.any {f->
//                    def path=  f.absolutePath
//                    println "${task.name}  DexMergingTask r324242114141     $path"
//                }
//            }
//        }
//    }


    p.getTasks().withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).whenTaskAdded { task ->
//        p.pluginManager.apply("kotlin-android")
        p.getExtensions().android.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    p.getTasks().withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        println("KotlinCompile KotlinCompile KotlinCompile KotlinCompile")
        p.pluginManager.apply("kotlin-android")
        p.getExtensions().android.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    ////        ant.replace(
    ////            file: manifest,
    ////            token: 'WRITE_EXTERNAL_STORAGE',
    ////            value: 'test test test'
    ////        ) {
    ////        }
    println("sesesesesese configure  $p    ")
//    ant.replace(
//            file: p.buildFile,
//            token: "apply plugin: 'kotlin-android'",
//            value: 'test test test'
//    ) {
//    }
    p.configurations { tmp ->
        println("sesesesesese configure  $p    ${p.buildscript.sourceFile}")
        p.buildscript.dependencies.any { d ->
            println("sdfsafsfasfsfafafasff $p    ${d}")
            p.extensions
        }


    }
    p.gradle.afterProject {


        println("sesesesesese configure  $p    ${p.buildscript.dependencies}")
        p.buildscript.dependencies.any { d ->
            println("sdfsafsfasfsfafafasff $p    ${d}")

        }

    }
    p.afterEvaluate {

        p.configurations.getByName("implementation").dependencies.any { d ->
            d.getGroup()
        }


        try {
            p.android.applicationVariants.all { BaseVariant variant ->
                //androidx.cardview:cardview:1.0.0
                def task = ((CheckManifest) variant.getCheckManifestProvider().get())
                task.getOutputs().any {input->
                    println("manifest manifest ${input.files.files}")

                }

                println("manifest manifest----- ${task.fakeOutputDir.get().asFile.absolutePath}")

                if (task.isManifestRequiredButNotPresent()) {

                }else{


//                    println("manifest manifest ${manifest.absolutePath}")

                }
                    variant.getCheckManifestProvider().get().getOutputs().any { input ->

                        println("variant.getCheckManifestProvider().get().getPath() ${input.files.getFiles()}")
                    }

                println("variant.getCheckManifestProvider().get().getPath() ${}")
            }
        } catch (Throwable e) {
        }


//        p.configurations.getByName("implementation").dependencies.any {d->
//            println("configurations   "+"${d.group}:${d.name}:${d.version}")
//            p.configurations.getByName("implementation").dependencies.remove(d)
//        }
        def isAndroidModule = p.getProperties().get("android") != null
        println("isAndroidModule isAndroidModule   $isAndroidModule")
        if (isAndroidModule) {
            try {
//                p.pluginManager.apply("kotlin-android")

                println("isAndroidModule isAndroidModule --------   $isAndroidModule")

//                p.dependencies.add("sdf","sadf")

            } catch (Throwable e) {
                e.printStackTrace()
            }
            println("pluginManager pluginManager pluginManager pluginManager")
        }
    }


//        println("configurations configurations configurations")
//        api plugin: 'kotlin-android'
//        PluginManager pm=((PluginAware)p).getPluginManager()
////        pm.apply ("asmlocal")
//    }
//            {
//        println("p.afterProject  $p")
//        println("p.afterProject   ${p.pluginManager.findPlugin("kotlin-kapt")}")
//        PluginManager pm=((PluginAware)p).getPluginManager()
//        pm.apply  plugin: "kotlin-android"
//
//        println("p.afterProject pluginManager   ${p.pluginManager.findPlugin("kotlin-android")}")
//
//    }


}


//public Project createChildProject(String name, Project parent, File projectDir) {
//    ProjectInternal parentProject = (ProjectInternal) parent;
//    DefaultProject project = CLASS_GENERATOR.newInstance(DefaultProject.class, name, parentProject, (projectDir != null) ? projectDir.getAbsoluteFile() : new File(parentProject.getProjectDir(), name), new StringScriptSource("test build file", null), parentProject.getGradle(), parentProject.getGradle().getServiceRegistryFactory(), parentProject.getClassLoaderScope().createChild("project-" + name), parentProject.getBaseClassLoaderScope());
//    parentProject.addChildProject(project);
//    parentProject.getProjectRegistry().addProject(project);
//    return project;
//}

afterEvaluate {
    apply from :"./permission.gradle"
    apply from :"./CheckDuplicateRes.gradle"
}